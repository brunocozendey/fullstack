"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = allOf;

function copyProperties(target, source) {
  const totalProps = [];
  let currentObj = source;

  do {
    const properties = [];
    Object.getOwnPropertyNames(currentObj).map(item => properties.push(item));
    Object.getOwnPropertySymbols(currentObj).map(item => properties.push(item));
    properties.forEach(propertyName => {
      if (totalProps.indexOf(propertyName) === -1) {
        totalProps.push(propertyName);
      } else {
        return void 0;
      }

      if (propertyName.match(/^(?:constructor|prototype|arguments|caller|name|bind|call|apply|toString|length)$/)) {
        return void 0;
      }

      const desc = Object.getOwnPropertyDescriptor(currentObj, propertyName);
      Object.defineProperty(target, propertyName, desc);
    });
  } while (Object.getPrototypeOf(currentObj) !== Object.getPrototypeOf({}) && (currentObj = Object.getPrototypeOf(currentObj)));
}

function allOf() {
  if (arguments.length === 0) {
    throw new Error('Arguments is required');
  }

  if (arguments.length === 1) {
    return class extends arguments[0] {};
  }

  class Base extends arguments[0] {
    constructor(...args) {
      super(...args);

      for (let i = 1; i < arguments.length; i++) {
        copyProperties(this, new arguments[i](...args));
      }
    }

  }

  for (let i = 1; i < arguments.length; i++) {
    copyProperties(Base.prototype, arguments[i].prototype);
  }

  return Base;
}